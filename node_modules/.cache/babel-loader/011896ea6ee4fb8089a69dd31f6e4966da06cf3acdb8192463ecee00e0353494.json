{"ast":null,"code":"var _jsxFileName = \"/Users/manojkrishnadamle/Downloads/Blog-websiteFolder-assignment-3/src/components/Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Container, Typography, Box, Button } from '@mui/material';\nimport Post from './Post'; // Make sure the path is correct\nimport { useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Posts() {\n  _s();\n  var _location$state;\n  const [posts, setPosts] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const topic = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.topic;\n  useEffect(() => {\n    const loadedPosts = JSON.parse(localStorage.getItem('blogPosts')) || [];\n    // Check if there's a topic selected (passed via state)\n\n    if (topic) {\n      const filteredPosts = loadedPosts.filter(post => post.topic === topic);\n      setPosts(filteredPosts);\n    } else {\n      setPosts(loadedPosts); // No topic selected, use all posts\n    }\n  }, [topic]);\n  const updatePosts = (postId, updatedPost) => {\n    const updatedPosts = posts.map((post, index) => index === postId ? updatedPost : post);\n    setPosts(updatedPosts);\n    localStorage.setItem('blogPosts', JSON.stringify(updatedPosts));\n  };\n  const handleDeletePost = postId => {\n    const updatedPosts = posts.filter((_, index) => index !== postId);\n    setPosts(updatedPosts);\n    localStorage.setItem('blogPosts', JSON.stringify(updatedPosts));\n  };\n  const isModerator = () => {\n    // Implement logic to determine if the user is a moderator\n    return localStorage.getItem('isModerator') === 'true';\n  };\n  const handleShowAllPosts = () => {\n    navigate('/', {\n      replace: true,\n      state: {}\n    }); // Navigate without a topic to reset the filter\n  };\n  const headingText = topic ? `Blog Posts in ${topic}` : \"All Blog Posts\";\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      sx: {\n        mt: 4,\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: headingText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), topic && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleShowAllPosts,\n        children: \"Show All Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), posts.length > 0 ? posts.map((post, index) => /*#__PURE__*/_jsxDEV(Post, {\n      post: post,\n      postId: index,\n      updatePosts: updatePosts,\n      onDelete: handleDeletePost,\n      isModerator: isModerator()\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      children: \"No posts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Posts, \"3znqFA/MxGA/gi93Xte5a9bQ2BE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","Container","Typography","Box","Button","Post","useLocation","useNavigate","jsxDEV","_jsxDEV","Posts","_s","_location$state","posts","setPosts","location","navigate","topic","state","loadedPosts","JSON","parse","localStorage","getItem","filteredPosts","filter","post","updatePosts","postId","updatedPost","updatedPosts","map","index","setItem","stringify","handleDeletePost","_","isModerator","handleShowAllPosts","replace","headingText","maxWidth","children","display","justifyContent","alignItems","sx","mt","mb","variant","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","onDelete","_c","$RefreshReg$"],"sources":["/Users/manojkrishnadamle/Downloads/Blog-websiteFolder-assignment-3/src/components/Posts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container, Typography, Box, Button } from '@mui/material';\nimport Post from './Post'; // Make sure the path is correct\nimport { useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Posts() {\n  const [posts, setPosts] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate()\n  const topic = location.state?.topic;\n\nuseEffect(() => {\n    const loadedPosts = JSON.parse(localStorage.getItem('blogPosts')) || [];\n    // Check if there's a topic selected (passed via state)\n    \n    \n    if (topic) {\n      const filteredPosts = loadedPosts.filter(post => post.topic === topic);\n      setPosts(filteredPosts);\n    } else {\n      setPosts(loadedPosts); // No topic selected, use all posts\n    }\n  }, [topic]);\n\n  const updatePosts = (postId, updatedPost) => {\n    const updatedPosts = posts.map((post, index) => \n      index === postId ? updatedPost : post\n    );\n    setPosts(updatedPosts);\n    localStorage.setItem('blogPosts', JSON.stringify(updatedPosts));\n  };\n\n  const handleDeletePost = (postId) => {\n    const updatedPosts = posts.filter((_, index) => index !== postId);\n    setPosts(updatedPosts);\n    localStorage.setItem('blogPosts', JSON.stringify(updatedPosts));\n  };\n\n  const isModerator = () => {\n    // Implement logic to determine if the user is a moderator\n    return localStorage.getItem('isModerator') === 'true';\n\n  };\n\n  const handleShowAllPosts = () => {\n    navigate('/', { replace: true, state: {} }); // Navigate without a topic to reset the filter\n  };\n  \n  const headingText = topic ? `Blog Posts in ${topic}` : \"All Blog Posts\";\n\n  return (\n    <Container maxWidth=\"md\">\n      {/* <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        Blog Posts\n      </Typography> */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" sx={{ mt: 4, mb: 2 }}>\n        <Typography variant=\"h4\">{headingText}</Typography>\n        {topic && (\n          <Button variant=\"outlined\" onClick={handleShowAllPosts} >Show All Posts</Button>\n        )}\n\n      </Box>\n      {posts.length > 0 ? (\n        posts.map((post, index) => (\n            <Post key={index} post={post} postId={index} updatePosts={updatePosts}  onDelete={handleDeletePost}\n            isModerator={isModerator()} />\n        ))\n      ) : (\n        <Typography variant=\"body1\">No posts available.</Typography>\n      )}\n    </Container>\n  );\n}\n\nexport default Posts;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,UAAU,EAAEC,GAAG,EAAEC,MAAM,QAAQ,eAAe;AAClE,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAC3B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA;EACf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMe,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,KAAK,IAAAL,eAAA,GAAGG,QAAQ,CAACG,KAAK,cAAAN,eAAA,uBAAdA,eAAA,CAAgBK,KAAK;EAErClB,SAAS,CAAC,MAAM;IACZ,MAAMoB,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE;IACvE;;IAGA,IAAIN,KAAK,EAAE;MACT,MAAMO,aAAa,GAAGL,WAAW,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACT,KAAK,KAAKA,KAAK,CAAC;MACtEH,QAAQ,CAACU,aAAa,CAAC;IACzB,CAAC,MAAM;MACLV,QAAQ,CAACK,WAAW,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACF,KAAK,CAAC,CAAC;EAEX,MAAMU,WAAW,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;IAC3C,MAAMC,YAAY,GAAGjB,KAAK,CAACkB,GAAG,CAAC,CAACL,IAAI,EAAEM,KAAK,KACzCA,KAAK,KAAKJ,MAAM,GAAGC,WAAW,GAAGH,IACnC,CAAC;IACDZ,QAAQ,CAACgB,YAAY,CAAC;IACtBR,YAAY,CAACW,OAAO,CAAC,WAAW,EAAEb,IAAI,CAACc,SAAS,CAACJ,YAAY,CAAC,CAAC;EACjE,CAAC;EAED,MAAMK,gBAAgB,GAAIP,MAAM,IAAK;IACnC,MAAME,YAAY,GAAGjB,KAAK,CAACY,MAAM,CAAC,CAACW,CAAC,EAAEJ,KAAK,KAAKA,KAAK,KAAKJ,MAAM,CAAC;IACjEd,QAAQ,CAACgB,YAAY,CAAC;IACtBR,YAAY,CAACW,OAAO,CAAC,WAAW,EAAEb,IAAI,CAACc,SAAS,CAACJ,YAAY,CAAC,CAAC;EACjE,CAAC;EAED,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,OAAOf,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,MAAM;EAEvD,CAAC;EAED,MAAMe,kBAAkB,GAAGA,CAAA,KAAM;IAC/BtB,QAAQ,CAAC,GAAG,EAAE;MAAEuB,OAAO,EAAE,IAAI;MAAErB,KAAK,EAAE,CAAC;IAAE,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMsB,WAAW,GAAGvB,KAAK,GAAI,iBAAgBA,KAAM,EAAC,GAAG,gBAAgB;EAEvE,oBACER,OAAA,CAACR,SAAS;IAACwC,QAAQ,EAAC,IAAI;IAAAC,QAAA,gBAItBjC,OAAA,CAACN,GAAG;MAACwC,OAAO,EAAC,MAAM;MAACC,cAAc,EAAC,eAAe;MAACC,UAAU,EAAC,QAAQ;MAACC,EAAE,EAAE;QAAEC,EAAE,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAE;MAAAN,QAAA,gBAC1FjC,OAAA,CAACP,UAAU;QAAC+C,OAAO,EAAC,IAAI;QAAAP,QAAA,EAAEF;MAAW;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,EAClDpC,KAAK,iBACJR,OAAA,CAACL,MAAM;QAAC6C,OAAO,EAAC,UAAU;QAACK,OAAO,EAAEhB,kBAAmB;QAAAI,QAAA,EAAE;MAAc;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAChF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEE,CAAC,EACLxC,KAAK,CAAC0C,MAAM,GAAG,CAAC,GACf1C,KAAK,CAACkB,GAAG,CAAC,CAACL,IAAI,EAAEM,KAAK,kBAClBvB,OAAA,CAACJ,IAAI;MAAaqB,IAAI,EAAEA,IAAK;MAACE,MAAM,EAAEI,KAAM;MAACL,WAAW,EAAEA,WAAY;MAAE6B,QAAQ,EAAErB,gBAAiB;MACnGE,WAAW,EAAEA,WAAW,CAAC;IAAE,GADhBL,KAAK;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACa,CAChC,CAAC,gBAEF5C,OAAA,CAACP,UAAU;MAAC+C,OAAO,EAAC,OAAO;MAAAP,QAAA,EAAC;IAAmB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAC5D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB;AAAC1C,EAAA,CAnEQD,KAAK;EAAA,QAEKJ,WAAW,EACXC,WAAW;AAAA;AAAAkD,EAAA,GAHrB/C,KAAK;AAqEd,eAAeA,KAAK;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}